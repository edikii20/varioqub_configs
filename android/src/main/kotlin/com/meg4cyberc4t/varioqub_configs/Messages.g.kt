// Copyright 2024 Igor Molchanov. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v19.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.meg4cyberc4t.varioqub_configs

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class VarioqubFetchErrorPigeon(val raw: Int) {
  EMPTY_RESULT(0),
  IDENTIFIERS_NULL(1),
  RESPONSE_PARSE_ERROR(2),
  REQUEST_THROTTLED(3),
  NETWORK_ERROR(4),
  INTERNAL_ERROR(5);

  companion object {
    fun ofRaw(raw: Int): VarioqubFetchErrorPigeon? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class VarioqubSettingsPigeon (
  val clientId: String,
  val url: String? = null,
  val fetchThrottleIntervalMs: Long? = null,
  val logs: Boolean? = null,
  val activateEvent: Boolean? = null,
  val trackingWithAppMetrica: Boolean,
  val clientFeatures: Map<String?, String?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): VarioqubSettingsPigeon {
      val clientId = __pigeon_list[0] as String
      val url = __pigeon_list[1] as String?
      val fetchThrottleIntervalMs = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long? }
      val logs = __pigeon_list[3] as Boolean?
      val activateEvent = __pigeon_list[4] as Boolean?
      val trackingWithAppMetrica = __pigeon_list[5] as Boolean
      val clientFeatures = __pigeon_list[6] as Map<String?, String?>
      return VarioqubSettingsPigeon(clientId, url, fetchThrottleIntervalMs, logs, activateEvent, trackingWithAppMetrica, clientFeatures)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      clientId,
      url,
      fetchThrottleIntervalMs,
      logs,
      activateEvent,
      trackingWithAppMetrica,
      clientFeatures,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FetchErrorPigeon (
  val message: String? = null,
  val error: VarioqubFetchErrorPigeon

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): FetchErrorPigeon {
      val message = __pigeon_list[0] as String?
      val error = VarioqubFetchErrorPigeon.ofRaw(__pigeon_list[1] as Int)!!
      return FetchErrorPigeon(message, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      message,
      error.raw,
    )
  }
}

private object VarioqubApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FetchErrorPigeon.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VarioqubSettingsPigeon.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is FetchErrorPigeon -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is VarioqubSettingsPigeon -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface VarioqubApiPigeon {
  fun build(settings: VarioqubSettingsPigeon)
  fun fetchConfig(callback: (Result<FetchErrorPigeon?>) -> Unit)
  fun activateConfig(callback: (Result<Unit>) -> Unit)
  fun getString(key: String, defaultValue: String): String
  fun getBool(key: String, defaultValue: Boolean): Boolean
  fun getInt(key: String, defaultValue: Long): Long
  fun getDouble(key: String, defaultValue: Double): Double
  fun getId(): String
  fun getAllKeys(): List<String>
  fun getAllValues(): Map<String, String>
  fun setDefaults(values: Map<String, Any>)
  fun putClientFeature(key: String, value: String)
  fun clearClientFeatures()

  companion object {
    /** The codec used by VarioqubApiPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      VarioqubApiPigeonCodec
    }
    /** Sets up an instance of `VarioqubApiPigeon` to handle messages through the `binaryMessenger`. */
    fun setUp(binaryMessenger: BinaryMessenger, api: VarioqubApiPigeon?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.build$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val settingsArg = args[0] as VarioqubSettingsPigeon
            val wrapped: List<Any?> = try {
              api.build(settingsArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.fetchConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fetchConfig() { result: Result<FetchErrorPigeon?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.activateConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.activateConfig() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.getString$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val defaultValueArg = args[1] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getString(keyArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.getBool$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val defaultValueArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getBool(keyArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.getInt$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val defaultValueArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getInt(keyArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.getDouble$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val defaultValueArg = args[1] as Double
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getDouble(keyArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.getId$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getId())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.getAllKeys$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getAllKeys())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.getAllValues$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.getAllValues())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.setDefaults$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val valuesArg = args[0] as Map<String, Any>
            val wrapped: List<Any?> = try {
              api.setDefaults(valuesArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.putClientFeature$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val keyArg = args[0] as String
            val valueArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.putClientFeature(keyArg, valueArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.varioqub_configs.VarioqubApiPigeon.clearClientFeatures$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clearClientFeatures()
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
